#!/usr/bin/env python3

'''
Cyclical figurate numbers
Problem 61

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are 
all figurate (polygonal) numbers and are generated by the following formulae:

   Triangle 	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
   Square   	 	P4,n=n**2     	 	1, 4, 9, 16, 25, ...
   Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
   Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
   Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
   Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first 
   two  digits of the next number (including the last number with the first).

2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and 
   pentagonal (P5,44=2882), is represented by a different number in the set.

3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which 
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and 
octagonal, is represented by a different number in the set.
'''

def get_polygonal(start, stop, shape):
    i = 1
    n = 0
    while n < stop:
        if n >= start:
            yield n

        if   shape == 3: n = i*(i+1)//2
        elif shape == 4: n = i**2
        elif shape == 5: n = i*(3*i-1)//2
        elif shape == 6: n = i*(2*i-1)
        elif shape == 7: n = i*(5*i-3)//2
        elif shape == 8: n = i*(3*i-2)

        i += 1

def find_next(n, unused, so_far):
    # Check is answer was found
    if not len(unused):
        if so_far[0]//100 == n % 100:
            print('ANSWER:', sum(so_far + [n]), so_far + [n])
            exit()

    # Check remained lists for numbers next number in sequence
    for l in unused:
        for m in p[l]:
            if m//100 == n % 100:
                new_unused = [x for x in unused if x != l]
                new_so_far = so_far + [n]
                find_next(m, new_unused, new_so_far)

# Use get_polygonal to produce lists for 4-digit polygonal numbers
p = {}
for shape in range(3, 9):
    p[shape] = [x for x in get_polygonal(1000, 10000, shape) if not x % 100 < 10]

# Run find next on each octagonal number
for n in p[8]:
    find_next(n, [3, 4, 5, 6, 7], [])
